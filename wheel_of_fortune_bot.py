import logging
import os
import random
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from dotenv import load_dotenv
from database import Database

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
DAILY_BONUS = 1
MAX_ATTEMPTS_PER_SPIN = 1
MAX_PAYMENT_AMOUNT = 10000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    await db.connect()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard(user_id=None):
    buttons = [
        [InlineKeyboardButton("üé∞ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="play")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ú–æ–∏ –ø–æ–ø—ã—Ç–∫–∏", callback_data="check_attempts")],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily_bonus")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral_info")]
    ]
    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])
    return InlineKeyboardMarkup(buttons)

def get_play_keyboard(user_id):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ (1 –ø–æ–ø—ã—Ç–∫–∞)", callback_data="spin_wheel")],
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–æ–∫", callback_data="buy_attempts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

def get_payment_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("1 –ø–æ–ø—ã—Ç–∫–∞ ‚Äî 50 —Ä—É–±", callback_data="pay_1")],
        [InlineKeyboardButton("3 –ø–æ–ø—ã—Ç–∫–∏ ‚Äî 130 —Ä—É–± (‚ÜòÔ∏è10%)", callback_data="pay_3")],
        [InlineKeyboardButton("5 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 200 —Ä—É–± (‚ÜòÔ∏è20%)", callback_data="pay_5")],
        [InlineKeyboardButton("10 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 350 —Ä—É–± (‚ÜòÔ∏è30%)", callback_data="pay_10")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

def get_admin_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏", callback_data="admin_payments")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args
    
    if args and args[0].startswith('ref'):
        referral_code = args[0][3:]
        if await db.process_referral(user.id, referral_code):
            await update.message.reply_text(
                "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +1 –ø–æ–ø—ã—Ç–∫—É –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!",
                parse_mode=ParseMode.HTML
            )
    
    ref_info = await db.get_referral_info(user.id)
    if ref_info and not ref_info['code']:
        await db.generate_referral_code(user.id)
    
    await update.message.reply_text(
        "üé° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>!\n\n"
        "üíé –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!\n"
        "üí∞ –ü–æ–ø—ã—Ç–∫–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å, –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard(user.id)
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data == "play":
        await show_play_menu(query)
    elif data == "check_attempts":
        await check_attempts(query)
    elif data == "daily_bonus":
        await daily_bonus(query)
    elif data == "referral_info":
        await referral_info(query)
    elif data == "buy_attempts":
        await buy_attempts(query)
    elif data == "spin_wheel":
        await spin_wheel(query)
    elif data == "back_to_start":
        await back_to_start(query)
    elif data.startswith("pay_"):
        attempts = int(data.split("_")[1])
        await process_payment(query, attempts)
    elif data == "admin_panel" and query.from_user.id == ADMIN_ID:
        await admin_panel(query)
    elif data == "admin_stats" and query.from_user.id == ADMIN_ID:
        await admin_stats(query)

async def show_play_menu(query):
    user_id = query.from_user.id
    attempts = await db.get_user_attempts(user_id)
    await query.edit_message_text(
        f"üé∞ <b>–ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é</b>\n\n"
        f"üîÑ –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: <b>{attempts['remaining']}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_play_keyboard(user_id)
    )

async def check_attempts(query):
    user_id = query.from_user.id
    attempts = await db.get_user_attempts(user_id)
    await query.edit_message_text(
        f"‚ÑπÔ∏è <b>–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏</b>\n\n"
        f"üí∞ –ö—É–ø–ª–µ–Ω–æ: <b>{attempts['paid']}</b>\n"
        f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{attempts['used']}</b>\n"
        f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: <b>{attempts['remaining']}</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard(user_id)
    )

async def daily_bonus(query):
    user_id = query.from_user.id
    attempts = await db.get_user_attempts(user_id)
    today = datetime.now().date().isoformat()
    
    if attempts['last_bonus_date'] == today:
        await query.answer("‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è!", show_alert=True)
        return
    
    await db.update_user_attempts(
        user_id=user_id,
        paid=DAILY_BONUS,
        last_bonus_date=today
    )
    
    await query.edit_message_text(
        f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>\n\n"
        f"‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>{DAILY_BONUS}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–ø—ã—Ç–∫—É!\n\n"
        f"üîÑ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{attempts['remaining'] + DAILY_BONUS}</b> –ø–æ–ø—ã—Ç–æ–∫.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard(user_id)
    )

async def referral_info(query):
    user_id = query.from_user.id
    ref_info = await db.get_referral_info(user_id)
    
    if not ref_info or not ref_info['code']:
        ref_code = await db.generate_referral_code(user_id)
    else:
        ref_code = ref_info['code']
    
    ref_link = f"https://t.me/{context.bot.username}?start=ref{ref_code}"
    
    await query.edit_message_text(
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
        f"üë§ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{ref_info['count'] if ref_info else 0}</b>\n\n"
        "üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>+1 –ø–æ–ø—ã—Ç–∫—É</b>!",
        parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard(user_id)
    )

async def buy_attempts(query):
    await query.edit_message_text(
        "üí∞ <b>–ü–æ–∫—É–ø–∫–∞ –ø–æ–ø—ã—Ç–æ–∫</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_payment_keyboard()
    )

async def spin_wheel(query):
    user_id = query.from_user.id
    attempts = await db.get_user_attempts(user_id)
    
    if attempts['remaining'] <= 0:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!", show_alert=True)
        return
    
    if not await db.update_user_attempts(user_id=user_id, used=1):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏", show_alert=True)
        return
    
    wheel_segments = ["üçí", "üçã", "üçä", "üçá", "üçâ", "üí∞", "üéÅ", "‚≠ê", "üçÄ"]
    segment_weights = [15, 15, 15, 15, 10, 5, 5, 10, 10]
    
    selected_index = random.choices(range(len(wheel_segments)), weights=segment_weights, k=1)[0]
    selected_segment = wheel_segments[selected_index]
    
    prize_mapping = {
        "üçí": ("10 —Ä—É–±–ª–µ–π", "money", "10"),
        "üçã": ("20 —Ä—É–±–ª–µ–π", "money", "20"),
        "üçä": ("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞", "attempt", "1"),
        "üçá": ("5 —Ä—É–±–ª–µ–π", "money", "5"),
        "üçâ": ("–ö–æ–Ω—Ñ–µ—Ç–∫–∞", "other", "candy"),
        "üí∞": ("100 —Ä—É–±–ª–µ–π", "money", "100"),
        "üéÅ": ("–ü–æ–¥–∞—Ä–æ–∫", "other", "gift"),
        "‚≠ê": ("5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫", "attempt", "5"),
        "üçÄ": ("–°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥. –∏–≥—Ä—É", "discount", "10")
    }
    prize_name, prize_type, prize_value = prize_mapping.get(selected_segment, ("–ù–∏—á–µ–≥–æ", "other", "none"))
    
    await db.add_prize(user_id, prize_type, prize_value)
    
    message = await query.message.reply_text(
        "üé° <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>\n\n"
        f"{' ' * 8}üëÜ\n"
        f"{' '.join(wheel_segments)}\n\n"
        "üåÄ –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...",
        parse_mode=ParseMode.HTML
    )
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞
    for frame in range(15):
        wheel_segments.insert(0, wheel_segments.pop())
        delay = 0.15 + (max(0, frame - 10) * 0.1)
        await message.edit_text(
            f"üé° <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>\n\n{' ' * 8}üëÜ\n{' '.join(wheel_segments)}\n\n"
            f"{'üåÄ' * (frame % 3 + 1)} –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...",
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(delay)
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    attempts = await db.get_user_attempts(user_id)
    await message.edit_text(
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\nüèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{prize_name}</b>\n\n"
        f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{attempts['remaining']}</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –µ—â–µ?",
        parse_mode=ParseMode.HTML,
        reply_markup=get_play_keyboard(user_id)
    )

async def back_to_start(query):
    await query.edit_message_text(
        "üé° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>!\n\n"
        "üíé –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!\n"
        "üí∞ –ü–æ–ø—ã—Ç–∫–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å, –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard(query.from_user.id)
    )

async def process_payment(query, attempts):
    user_id = query.from_user.id
    prices = {1: 50, 3: 130, 5: 200, 10: 350}
    amount = prices.get(attempts, 50 * attempts)
    
    try:
        transaction_id = await db.create_transaction(user_id, amount, attempts)
        await query.edit_message_text(
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫</b>\n\n"
            f"üí∞ –°—É–º–º–∞: <b>{amount} —Ä—É–±</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Payment error: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.photo:
        photo = update.message.photo[-1]
        await update.message.reply_text(
            "‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –Ω–∞—á–∏—Å–ª–∏—Ç –ø–æ–ø—ã—Ç–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
            parse_mode=ParseMode.HTML
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if ADMIN_ID:
            await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=photo.file_id,
                caption=f"–ù–æ–≤—ã–π —á–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.from_user.id}"
            )

async def admin_panel(query):
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    await query.edit_message_text(
        "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_keyboard()
    )

async def admin_stats(query):
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    await query.edit_message_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>100</b>\n"
        "üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: <b>5000 —Ä—É–±</b>\n"
        "üé∞ –í—Å–µ–≥–æ –∏–≥—Ä: <b>250</b>",
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_keyboard()
    )

async def main():
    application = None
    try:
        await init_db()
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button))
        application.add_handler(MessageHandler(filters.PHOTO, handle_receipt))
        
        logger.info("Bot starting...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        while True:
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç
            
    except asyncio.CancelledError:
        logger.info("Bot received shutdown signal")
    except Exception as e:
        logger.error(f"Bot crashed: {e}")
    finally:
        if application:
            logger.info("Stopping bot gracefully...")
            await application.updater.stop()
            await application.stop()
            await application.shutdown()

if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by keyboard interrupt")
    finally:
        loop.close()
        logger.info("Event loop closed")