import logging
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, CallbackQueryHandler, filters
from dotenv import load_dotenv
import asyncio  # –î–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫

# –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–∑–æ–≤—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –ö–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã
PRIZES = [
    "100 —Ä—É–±–ª–µ–π",
    "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞",
    "5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫",
    "10 —Ä—É–±–ª–µ–π",
    "–ö–æ–Ω—Ñ–µ—Ç–∫–∞",
    "–ù–∏—á–µ–≥–æ",
    "5 —Ä—É–±–ª–µ–π",
    "–°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥. –∏–≥—Ä—É",
    "–ü–æ–¥–∞—Ä–æ–∫"
]

# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫—Ç–æ —Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª
user_attempts = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
def get_start_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="play")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 3 –ø–æ–ø—ã—Ç–∫–∏", callback_data="buy_3_attempts")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 5 –ø–æ–ø—ã—Ç–æ–∫", callback_data="buy_5_attempts")],
        [InlineKeyboardButton("–ö—É–ø–∏—Ç—å 10 –ø–æ–ø—ã—Ç–æ–∫", callback_data="buy_10_attempts")]
    ])

def get_play_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ", callback_data="spin_wheel")]])

def get_play_disabled_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ–ø—ã—Ç–∫—É", callback_data="spin_wheel_disabled")]])

# –ö–æ–º–∞–Ω–¥–∞ start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ.",
        reply_markup=get_start_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ø—ã—Ç–æ–∫
async def buy_attempts(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    attempts_to_buy = int(update.callback_query.data.split('_')[1])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_attempts:
        user_attempts[user_id] = 0

    user_attempts[user_id] += attempts_to_buy

    await update.callback_query.message.edit_text(
        f"–í—ã –∫—É–ø–∏–ª–∏ {attempts_to_buy} –ø–æ–ø—ã—Ç–æ–∫! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_attempts[user_id]} –ø–æ–ø—ã—Ç–æ–∫.",
        reply_markup=get_play_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –ø—Ä–∏–∑–æ–≤
async def spin_wheel(update: Update, context: CallbackContext):
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∏
    if user_id not in user_attempts or user_attempts[user_id] == 0:
        # –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫! –ö—É–ø–∏—Ç–µ –∏—Ö –¥–ª—è –∏–≥—Ä—ã.",
            reply_markup=get_start_keyboard()
        )
        return

    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    user_attempts[user_id] -= 1

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Ä–∞—â–µ–Ω–∏–µ
    result_message = await update.callback_query.message.reply_text(
        "üîÑ –í—Ä–∞—â–∞—é –∫–æ–ª–µ—Å–æ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    # –ü—Ä–æ–π–¥–µ–º—Å—è –ø–æ –≤—Å–µ–º –ø—Ä–∏–∑–∞–º –∏ –ø–æ–∫–∞–∂–µ–º –∏—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for prize in PRIZES:
        await result_message.edit_text(
            f"–í—Ä–∞—â–µ–Ω–∏–µ... \n–ü—Ä–∏–∑: {prize}"
        )
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–∑–∞

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –ø—Ä–∏–∑—ã –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final_prize = random.choice(PRIZES)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
    await result_message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª: {final_prize} üéâ",
        reply_markup=get_play_disabled_keyboard()  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if query.data == "play":
        await play(update, context)
    elif query.data == "spin_wheel":
        await spin_wheel(update, context)
    elif query.data.startswith("buy_"):
        await buy_attempts(update, context)

# –û—à–∏–±–∫–∏
async def error(update: Update, context: CallbackContext):
    logger.warning(f'Update {update} caused error {context.error}')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_error_handler(error)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
