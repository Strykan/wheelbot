import logging
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, CallbackQueryHandler, filters
from dotenv import load_dotenv
import asyncio  # –î–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫

# –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–∑–æ–≤—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –ö–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã
PRIZES = [
    "100 —Ä—É–±–ª–µ–π",
    "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞",
    "5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫",
    "10 —Ä—É–±–ª–µ–π",
    "–ö–æ–Ω—Ñ–µ—Ç–∫–∞",
    "–ù–∏—á–µ–≥–æ",
    "5 —Ä—É–±–ª–µ–π",
    "–°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥. –∏–≥—Ä—É",
    "–ü–æ–¥–∞—Ä–æ–∫"
]

# –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∫—Ç–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–≤–æ—é –ø–æ–ø—ã—Ç–∫—É
user_attempts = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
def get_start_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="play")]])

def get_play_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ", callback_data="spin_wheel")]])

def get_play_disabled_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ–ø—ã—Ç–∫—É", callback_data="spin_wheel_disabled")]])

# –ö–æ–º–∞–Ω–¥–∞ start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ.",
        reply_markup=get_start_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ play
async def play(update: Update, context: CallbackContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.message.delete()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
    keyboard = [
        [InlineKeyboardButton("1 –ø–æ–ø—ã—Ç–∫–∞ ‚Äî 50 —Ä—É–±–ª–µ–π", callback_data="pay_1")],
        [InlineKeyboardButton("3 –ø–æ–ø—ã—Ç–∫–∏ ‚Äî 130 —Ä—É–±–ª–µ–π", callback_data="pay_3")],
        [InlineKeyboardButton("5 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 200 —Ä—É–±–ª–µ–π", callback_data="pay_5")],
        [InlineKeyboardButton("10 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 350 —Ä—É–±–ª–µ–π", callback_data="pay_10")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –°—É–º–º–∞ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
async def handle_payment_choice(update: Update, context: CallbackContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ø—ã—Ç–æ–∫ –∏–∑ callback_data
    choice = update.callback_query.data.split("_")[1]
    amounts = {"1": 50, "3": 130, "5": 200, "10": 350}  # –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É
    price = amounts.get(choice)
    if price:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        await update.callback_query.message.delete()
        await update.callback_query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {choice} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ {price} —Ä—É–±–ª–µ–π.\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ, –∏ —è –¥–∞–º –≤–∞–º –ø–æ–ø—ã—Ç–∫–∏!"
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        context.chat_data["payment_choice"] = choice
    else:
        await update.callback_query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã —Å –ø–æ–æ—á–µ—Ä–µ–¥–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –ø—Ä–∏–∑–æ–≤
async def spin_wheel(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Å–≤–æ—é –ø–æ–ø—ã—Ç–∫—É
    if user_id in user_attempts and user_attempts[user_id]:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞
        await update.callback_query.message.reply_text(
            "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ—é –ø–æ–ø—ã—Ç–∫—É! –ü–æ–≤—Ç–æ—Ä–Ω–æ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ –Ω–µ–ª—å–∑—è.",
            reply_markup=get_play_disabled_keyboard()
        )
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø–æ–ø—ã—Ç–∫—É
    user_attempts[user_id] = True

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤—Ä–∞—â–µ–Ω–∏–µ
    result_message = await update.callback_query.message.reply_text(
        "üîÑ –í—Ä–∞—â–∞—é –∫–æ–ª–µ—Å–æ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    # –ü—Ä–æ–π–¥–µ–º—Å—è –ø–æ –≤—Å–µ–º –ø—Ä–∏–∑–∞–º –∏ –ø–æ–∫–∞–∂–µ–º –∏—Ö —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for prize in PRIZES:
        await result_message.edit_text(
            f"–í—Ä–∞—â–µ–Ω–∏–µ... \n–ü—Ä–∏–∑: {prize}"
        )
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–∑–∞

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å–µ –ø—Ä–∏–∑—ã –±—ã–ª–∏ –≤—ã–≤–µ–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    final_prize = random.choice(PRIZES)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
    await result_message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª: {final_prize} üéâ",
        reply_markup=get_play_disabled_keyboard()  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
async def handle_receipt(update: Update, context: CallbackContext):
    user = update.effective_user
    if update.message.photo or update.message.document:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        user_id = user.id
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—É–º–º—É –∏–∑ context
        payment_choice = context.chat_data.get("payment_choice", None)
        if payment_choice:
            amount = {"1": 50, "3": 130, "5": 200, "10": 350}.get(payment_choice, 0)
            caption = f"–ß–µ–∫ –æ—Ç @{user.username} (ID: {user_id}). –û–ø–ª–∞—á–µ–Ω–æ: {amount} —Ä—É–±–ª–µ–π."

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∞–¥–º–∏–Ω—É
            if update.message.photo:
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=update.message.photo[-1].file_id,
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment:{user_id}"),
                         InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"decline_payment:{user_id}")]
                    ])
                )
            elif update.message.document:
                await context.bot.send_document(
                    chat_id=ADMIN_ID,
                    document=update.message.document.file_id,
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment:{user_id}"),
                         InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"decline_payment:{user_id}")]
                    ])
                )
            await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—É–º–º–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ –ø–ª–∞—Ç–µ–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)
async def confirm_payment(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        # –ü–æ–ª—É—á–∞–µ–º user_id –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data
        client_id = int(update.callback_query.data.split(":")[1])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
        await context.bot.send_message(
            chat_id=client_id,
            text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã.",
            reply_markup=get_play_keyboard()  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–≥—Ä—ã
        )
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await update.callback_query.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
    else:
        await update.callback_query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É.")

async def decline_payment(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        # –ü–æ–ª—É—á–∞–µ–º user_id –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data
        client_id = int(update.callback_query.data.split(":")[1])
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        await context.bot.send_message(
            chat_id=client_id,
            text="–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await update.callback_query.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    else:
        await update.callback_query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –æ–ø–ª–∞—Ç–æ–π
    if query.data.startswith("pay_"):
        choice = query.data.split("_")[1]
        context.chat_data["payment_choice"] = choice  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await handle_payment_choice(update, context)
    elif query.data == "spin_wheel":
        await spin_wheel(update, context)
    elif query.data.startswith("confirm_payment"):
        await confirm_payment(update, context)
    elif query.data.startswith("decline_payment"):
        await decline_payment(update, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
    application = Application.builder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.PHOTO | filters.DOCUMENT, handle_receipt))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
