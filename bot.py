import logging
import os
import random
import asyncio
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
DAILY_BONUS = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('wheel_of_fortune.db', check_same_thread=False)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute('''CREATE TABLE IF NOT EXISTS user_attempts
                      (user_id INTEGER PRIMARY KEY, 
                       paid INTEGER DEFAULT 0, 
                       used INTEGER DEFAULT 0,
                       last_bonus_date TEXT,
                       referral_code TEXT UNIQUE,
                       referred_by INTEGER DEFAULT NULL,
                       referrals_count INTEGER DEFAULT 0)''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS payment_methods
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       name TEXT NOT NULL UNIQUE,
                       details TEXT NOT NULL,
                       is_active BOOLEAN DEFAULT 1)''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS transactions
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER NOT NULL,
                       amount INTEGER NOT NULL,
                       attempts INTEGER NOT NULL,
                       status TEXT NOT NULL,
                       receipt_id TEXT,
                       admin_id INTEGER,
                       created_at TEXT NOT NULL,
                       updated_at TEXT)''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS prizes
                      (id INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id INTEGER NOT NULL,
                       prize_type TEXT NOT NULL,
                       value TEXT NOT NULL,
                       is_claimed BOOLEAN DEFAULT 0,
                       created_at TEXT NOT NULL)''')

    conn.commit()
    return conn, cursor

conn, cursor = init_db()

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
def validate_input(text, max_length=1000):
    if not text or len(text.strip()) == 0:
        return False
    if len(text) > max_length:
        return False
    return True

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard(user_id=None):
    buttons = [
        [InlineKeyboardButton("üé∞ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="play")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ú–æ–∏ –ø–æ–ø—ã—Ç–∫–∏", callback_data="check_attempts")],
        [InlineKeyboardButton("üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å", callback_data="daily_bonus")],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="referral_info")]
    ]
    if user_id == ADMIN_ID:
        buttons.append([InlineKeyboardButton("üõ† –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_panel")])
    return InlineKeyboardMarkup(buttons)

def get_play_keyboard(user_id):
    attempts = get_user_attempts(user_id)
    if attempts['remaining'] > 0:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ (1 –ø–æ–ø—ã—Ç–∫–∞)", callback_data="spin_wheel")],
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–æ–∫", callback_data="buy_attempts")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="buy_attempts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

def get_payment_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("1 –ø–æ–ø—ã—Ç–∫–∞ ‚Äî 50 —Ä—É–±", callback_data="pay_1")],
        [InlineKeyboardButton("3 –ø–æ–ø—ã—Ç–∫–∏ ‚Äî 130 —Ä—É–± (‚ÜòÔ∏è10%)", callback_data="pay_3")],
        [InlineKeyboardButton("5 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 200 —Ä—É–± (‚ÜòÔ∏è20%)", callback_data="pay_5")],
        [InlineKeyboardButton("10 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 350 —Ä—É–± (‚ÜòÔ∏è30%)", callback_data="pay_10")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

def get_payment_methods_keyboard():
    methods = get_payment_methods()
    keyboard = []
    for method in methods:
        keyboard.append([InlineKeyboardButton(method[1], callback_data=f"method_{method[0]}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])
    return InlineKeyboardMarkup(keyboard)

def get_admin_payment_methods_keyboard():
    cursor.execute('SELECT id, name, is_active FROM payment_methods')
    methods = cursor.fetchall()
    keyboard = []
    for method in methods:
        status = "‚úÖ" if method[2] else "‚ùå"
        keyboard.append([
            InlineKeyboardButton(f"{status} {method[1]}", callback_data=f"admin_method_{method[0]}"),
            InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_method_{method[0]}"),
            InlineKeyboardButton("üóë", callback_data=f"delete_method_{method[0]}")
        ])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–±", callback_data="add_payment_method")])
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="admin_back")])
    return InlineKeyboardMarkup(keyboard)

def get_admin_main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç–æ–π", callback_data="manage_payment_methods")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_start")]
    ])

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_user_attempts(user_id):
    cursor.execute('SELECT paid, used, last_bonus_date FROM user_attempts WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    if result:
        return {
            'paid': result[0],
            'used': result[1],
            'remaining': result[0] - result[1],
            'last_bonus_date': result[2]
        }
    return {'paid': 0, 'used': 0, 'remaining': 0, 'last_bonus_date': None}

def update_user_attempts(user_id, paid=0, used=0, last_bonus_date=None):
    try:
        cursor.execute(
            '''INSERT OR IGNORE INTO user_attempts (user_id) VALUES (?)''',
            (user_id,)
        )
        
        update_query = '''UPDATE user_attempts SET '''
        params = []
        
        if paid != 0:
            update_query += '''paid = paid + ?, '''
            params.append(paid)
        
        if used != 0:
            update_query += '''used = used + ?, '''
            params.append(used)
        
        if last_bonus_date:
            update_query += '''last_bonus_date = ?, '''
            params.append(last_bonus_date)
        
        update_query = update_query[:-2]
        update_query += ''' WHERE user_id = ?'''
        params.append(user_id)
        
        cursor.execute(update_query, params)
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

def get_payment_methods():
    try:
        cursor.execute('SELECT id, name, details FROM payment_methods WHERE is_active = 1')
        return cursor.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def add_payment_method(name, details):
    if not validate_input(name, 50) or not validate_input(details, 1000):
        return False
        
    try:
        cursor.execute('SELECT id FROM payment_methods WHERE name = ?', (name,))
        if cursor.fetchone():
            logger.warning(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
            
        cursor.execute(
            'INSERT INTO payment_methods (name, details) VALUES (?, ?)',
            (name, details)
        )
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {name}")
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

def update_payment_method(method_id, name, details):
    if not validate_input(name, 50) or not validate_input(details, 1000):
        return False
        
    try:
        cursor.execute(
            'UPDATE payment_methods SET name = ?, details = ? WHERE id = ?',
            (name, details, method_id)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

def toggle_payment_method(method_id):
    try:
        cursor.execute(
            'UPDATE payment_methods SET is_active = NOT is_active WHERE id = ?',
            (method_id,)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

def delete_payment_method(method_id):
    try:
        cursor.execute(
            'DELETE FROM payment_methods WHERE id = ?',
            (method_id,)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

def get_payment_method(method_id):
    try:
        cursor.execute(
            'SELECT name, details FROM payment_methods WHERE id = ?',
            (method_id,)
        )
        return cursor.fetchone()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def create_transaction(user_id, amount, attempts, status='pending'):
    try:
        now = datetime.now().isoformat()
        cursor.execute(
            '''INSERT INTO transactions 
               (user_id, amount, attempts, status, created_at) 
               VALUES (?, ?, ?, ?, ?)''',
            (user_id, amount, attempts, status, now)
        )
        conn.commit()
        return cursor.lastrowid
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return None

def update_transaction(transaction_id, status, admin_id=None, receipt_id=None):
    try:
        now = datetime.now().isoformat()
        cursor.execute(
            '''UPDATE transactions SET 
               status = ?, 
               admin_id = ?,
               receipt_id = ?,
               updated_at = ?
               WHERE id = ?''',
            (status, admin_id, receipt_id, now, transaction_id)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

def add_prize(user_id, prize_type, value):
    try:
        now = datetime.now().isoformat()
        cursor.execute(
            '''INSERT INTO prizes 
               (user_id, prize_type, value, created_at) 
               VALUES (?, ?, ?, ?)''',
            (user_id, prize_type, value, now)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

def get_unclaimed_prizes(user_id):
    try:
        cursor.execute(
            '''SELECT id, prize_type, value FROM prizes 
               WHERE user_id = ? AND is_claimed = 0''',
            (user_id,)
        )
        return cursor.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def claim_prize(prize_id):
    try:
        cursor.execute(
            '''UPDATE prizes SET is_claimed = 1 WHERE id = ?''',
            (prize_id,)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

def generate_referral_code(user_id):
    code = f"REF{user_id}{random.randint(1000, 9999)}"
    try:
        cursor.execute(
            '''UPDATE user_attempts SET referral_code = ? WHERE user_id = ?''',
            (code, user_id)
        )
        conn.commit()
        return code
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return None

def get_referral_info(user_id):
    try:
        cursor.execute(
            '''SELECT referral_code, referred_by, referrals_count 
               FROM user_attempts WHERE user_id = ?''',
            (user_id,)
        )
        result = cursor.fetchone()
        if result:
            return {
                'code': result[0],
                'referred_by': result[1],
                'count': result[2]
            }
        return None
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def process_referral(user_id, referral_code):
    try:
        cursor.execute(
            '''SELECT user_id FROM user_attempts WHERE referral_code = ?''',
            (referral_code,)
        )
        referrer = cursor.fetchone()
        if not referrer:
            return False
            
        referrer_id = referrer[0]
        
        cursor.execute(
            '''UPDATE user_attempts SET referred_by = ? WHERE user_id = ?''',
            (referrer_id, user_id)
        )
        
        cursor.execute(
            '''UPDATE user_attempts 
               SET referrals_count = referrals_count + 1,
                   paid = paid + 1 
               WHERE user_id = ?''',
            (referrer_id,)
        )
        
        cursor.execute(
            '''UPDATE user_attempts SET paid = paid + 1 WHERE user_id = ?''',
            (user_id,)
        )
        
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    args = context.args
    
    if args and args[0].startswith('ref'):
        referral_code = args[0][3:]
        if process_referral(user.id, referral_code):
            await update.message.reply_text(
                "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ +1 –ø–æ–ø—ã—Ç–∫—É –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!",
                parse_mode=ParseMode.HTML
            )
    
    ref_info = get_referral_info(user.id)
    if ref_info and not ref_info['code']:
        generate_referral_code(user.id)
    
    if user.id == ADMIN_ID:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            reply_markup=get_start_keyboard(ADMIN_ID)
        )
    else:
        await update.message.reply_text(
            "üé° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>!\n\n"
            "üíé –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!\n"
            "üí∞ –ü–æ–ø—ã—Ç–∫–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å, –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_start_keyboard()
        )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    await query.message.edit_text(
        "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_main_keyboard()
    )

async def manage_payment_methods(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    await query.message.edit_text(
        "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_payment_methods_keyboard()
    )

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    try:
        cursor.execute('SELECT COUNT(*) FROM user_attempts')
        total_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT SUM(paid), SUM(used) FROM user_attempts')
        attempts = cursor.fetchone()
        total_paid = attempts[0] or 0
        total_used = attempts[1] or 0
        
        cursor.execute('''SELECT status, COUNT(*), SUM(amount) 
                          FROM transactions GROUP BY status''')
        transactions = cursor.fetchall()
        
        stats_text = [
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n",
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>",
            f"üéØ –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: <b>{total_paid}</b> (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{total_used}</b>)",
            "\nüí≥ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>"
        ]
        
        for status, count, amount in transactions:
            stats_text.append(
                f"‚ñ™Ô∏è {status.capitalize()}: <b>{count}</b> –Ω–∞ —Å—É–º–º—É <b>{amount or 0} —Ä—É–±</b>"
            )
        
        await query.message.edit_text(
            "\n".join(stats_text),
            parse_mode=ParseMode.HTML,
            reply_markup=get_admin_main_keyboard()
        )
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

async def add_payment_method_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    context.user_data['adding_payment_method'] = True
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
        ])
    )

async def edit_payment_method_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    method_id = int(query.data.split('_')[-1])
    context.user_data['editing_payment_method'] = method_id
    method = get_payment_method(method_id)
    
    if method:
        await query.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"‚ñ™Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: <code>{method[0]}</code>\n"
            f"‚ñ™Ô∏è –†–µ–∫–≤–∏–∑–∏—Ç—ã: <code>{method[1]}</code>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
            ])
        )
    else:
        await query.answer("‚ùå –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

async def handle_payment_method_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'adding_payment_method' in context.user_data:
        name = update.message.text.strip()
        if not validate_input(name, 50):
            await update.message.reply_text(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
                ])
            )
            return
            
        context.user_data['new_payment_name'] = name
        context.user_data['adding_payment_method'] = False
        context.user_data['adding_payment_details'] = True
        
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (–º–∞–∫—Å. 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
            ])
        )
    
    elif 'adding_payment_details' in context.user_data:
        details = update.message.text.strip()
        if not validate_input(details, 1000):
            await update.message.reply_text(
                "‚ùå –†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–∞—Ç—å 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
                ])
            )
            return
            
        name = context.user_data.get('new_payment_name')
        if not name:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
                ])
            )
            return
            
        if add_payment_method(name, details):
            await update.message.reply_text(
                f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                parse_mode=ParseMode.HTML
            )
            context.user_data.pop('new_payment_name', None)
            context.user_data.pop('adding_payment_details', None)
            await manage_payment_methods(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
                ])
            )
    
    elif 'editing_payment_method' in context.user_data:
        method_id = context.user_data['editing_payment_method']
        try:
            text = update.message.text.strip()
            if not text:
                await update.message.reply_text(
                    "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
                    ])
                )
                return
                
            parts = text.split('\n', 1)
            if len(parts) != 2:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
                    ])
                )
                return
                
            name, details = parts
            name = name.strip()
            details = details.strip()
            
            if not validate_input(name, 50) or not validate_input(details, 1000):
                await update.message.reply_text(
                    "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
                    ])
                )
                return
                
            if update_payment_method(method_id, name, details):
                await update.message.reply_text(
                    "‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
                    ])
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
                ])
            )
        finally:
            context.user_data.pop('editing_payment_method', None)
            await manage_payment_methods(update, context)

async def toggle_payment_method_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    method_id = int(query.data.split('_')[-1])
    if toggle_payment_method(method_id):
        await query.message.edit_reply_markup(reply_markup=get_admin_payment_methods_keyboard())
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)

async def delete_payment_method_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    method_id = int(query.data.split('_')[-1])
    if delete_payment_method(method_id):
        await query.message.edit_reply_markup(reply_markup=get_admin_payment_methods_keyboard())
    else:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)

async def buy_attempts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    await query.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:\n\n"
        "üíé 1 –ø–æ–ø—ã—Ç–∫–∞ ‚Äî 50 —Ä—É–±\n"
        "üíé 3 –ø–æ–ø—ã—Ç–∫–∏ ‚Äî 130 —Ä—É–± (—ç–∫–æ–Ω–æ–º–∏—è 10%)\n"
        "üíé 5 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 200 —Ä—É–± (—ç–∫–æ–Ω–æ–º–∏—è 20%)\n"
        "üíé 10 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 350 —Ä—É–± (—ç–∫–æ–Ω–æ–º–∏—è 30%)",
        reply_markup=get_payment_keyboard()
    )

async def check_attempts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    attempts = get_user_attempts(user_id)
    
    text = (
        f"üìä <b>–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏</b>\n\n"
        f"üíé –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: <b>{attempts['paid']}</b>\n"
        f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{attempts['used']}</b>\n"
        f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: <b>{attempts['remaining']}</b>"
    )
    
    await query.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=get_play_keyboard(user_id)
    )

async def daily_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    attempts = get_user_attempts(user_id)
    
    now = datetime.now().date()
    last_bonus_date = datetime.fromisoformat(attempts['last_bonus_date']).date() if attempts['last_bonus_date'] else None
    
    if last_bonus_date and last_bonus_date == now:
        await query.answer("üéÅ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!", show_alert=True)
        return
    
    update_user_attempts(
        user_id=user_id,
        paid=DAILY_BONUS,
        last_bonus_date=datetime.now().isoformat()
    )
    
    await query.message.edit_text(
        f"üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>\n\n"
        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{DAILY_BONUS}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!\n\n"
        f"üéØ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{attempts['remaining'] + DAILY_BONUS}</b> –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_play_keyboard(user_id)
    )

async def referral_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    ref_info = get_referral_info(user_id)
    
    if not ref_info or not ref_info['code']:
        ref_info = {'code': generate_referral_code(user_id), 'count': 0}
    
    text = (
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<code>https://t.me/{(await context.bot.get_me()).username}?start=ref{ref_info['code']}</code>\n\n"
        f"üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:\n"
        f"‚ñ™Ô∏è +1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –≤–∞—Å\n"
        f"‚ñ™Ô∏è +1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞\n\n"
        f"üìä –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: <b>{ref_info['count']}</b> —á–µ–ª–æ–≤–µ–∫"
    )
    
    await query.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
    )

async def handle_payment_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    choice = query.data.split("_")[1]
    amounts = {"1": 50, "3": 130, "5": 200, "10": 350}
    attempts = {"1": 1, "3": 3, "5": 5, "10": 10}
    
    if choice in amounts:
        context.chat_data["payment_choice"] = choice
        context.chat_data["payment_amount"] = amounts[choice]
        context.chat_data["payment_attempts"] = attempts[choice]
        
        await query.message.edit_text(
            f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{choice}</b> –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ <b>{amounts[choice]} —Ä—É–±</b>.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_payment_methods_keyboard()
        )
    else:
        await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)

async def show_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    method_id = int(query.data.split("_")[1])
    method = get_payment_method(method_id)
    
    if not method:
        await query.answer("‚ùå –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    name, details = method
    choice = context.chat_data.get("payment_choice")
    amount = context.chat_data.get("payment_amount", 0)
    
    transaction_id = create_transaction(
        user_id=query.from_user.id,
        amount=amount,
        attempts=context.chat_data["payment_attempts"],
        status='pending'
    )
    
    if not transaction_id:
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", show_alert=True)
        return
    
    context.chat_data["current_transaction"] = transaction_id
    
    await query.message.edit_text(
        f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {name}</b>\n\n"
        f"üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {choice}\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–±\n\n"
        f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
        f"{details}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.\n"
        "‚ùóÔ∏è –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É —É–∫–∞–∂–∏—Ç–µ ID: <code>{transaction_id}</code>",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±", callback_data="back_to_payment_methods")]
        ])
    )

async def back_to_payment_methods(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_methods_keyboard()
    )

async def spin_wheel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    attempts = get_user_attempts(user_id)
    
    if attempts['remaining'] <= 0:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!", show_alert=True)
        return
    
    if not update_user_attempts(user_id=user_id, used=1):
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–æ–ø—ã—Ç–∫–∏", show_alert=True)
        return
    
    wheel_segments = ["üçí", "üçã", "üçä", "üçá", "üçâ", "üí∞", "üéÅ", "‚≠ê", "üçÄ"]
    segment_weights = [15, 15, 15, 15, 10, 5, 5, 10, 10]
    
    selected_index = random.choices(range(len(wheel_segments)), weights=segment_weights, k=1)[0]
    selected_segment = wheel_segments[selected_index]
    
    prize_mapping = {
        "üçí": ("10 —Ä—É–±–ª–µ–π", "money", "10"),
        "üçã": ("20 —Ä—É–±–ª–µ–π", "money", "20"),
        "üçä": ("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞", "attempt", "1"),
        "üçá": ("5 —Ä—É–±–ª–µ–π", "money", "5"),
        "üçâ": ("–ö–æ–Ω—Ñ–µ—Ç–∫–∞", "other", "candy"),
        "üí∞": ("100 —Ä—É–±–ª–µ–π", "money", "100"),
        "üéÅ": ("–ü–æ–¥–∞—Ä–æ–∫", "other", "gift"),
        "‚≠ê": ("5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫", "attempt", "5"),
        "üçÄ": ("–°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥. –∏–≥—Ä—É", "discount", "10")
    }
    prize_name, prize_type, prize_value = prize_mapping.get(selected_segment, ("–ù–∏—á–µ–≥–æ", "other", "none"))
    
    add_prize(user_id, prize_type, prize_value)
    
    message = await query.message.reply_text(
        "üé° <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>\n\n"
        f"{' ' * 8}üëÜ\n"
        f"{' '.join(wheel_segments)}\n\n"
        "üåÄ –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...",
        parse_mode=ParseMode.HTML
    )
    
    spin_duration = 3
    frames = 15
    slowdown_start = 10
    
    for frame in range(frames):
        wheel_segments.insert(0, wheel_segments.pop())
        
        if frame < slowdown_start:
            delay = 0.15
        else:
            delay = 0.15 + (frame - slowdown_start) * 0.1
        
        await message.edit_text(
            "üé° <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>\n\n"
            f"{' ' * 8}üëÜ\n"
            f"{' '.join(wheel_segments)}\n\n"
            f"{'üåÄ' * (frame % 3 + 1)} –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...",
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(delay)
    
    while wheel_segments[-1] != selected_segment:
        wheel_segments.insert(0, wheel_segments.pop())
        await message.edit_text(
            "üé° <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>\n\n"
            f"{' ' * 8}üëÜ\n"
            f"{' '.join(wheel_segments)}\n\n"
            "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...",
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(0.3)
    
    attempts = get_user_attempts(user_id)
    
    await message.edit_text(
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
        f"üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{prize_name}</b>\n\n"
        f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{attempts['remaining']}</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –µ—â–µ?",
        parse_mode=ParseMode.HTML,
        reply_markup=get_play_keyboard(user_id)
    )
    
    try:
        await query.message.delete()
    except:
        pass

async def handle_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    transaction_id = context.chat_data.get("current_transaction")
    
    if not transaction_id:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="buy_attempts")]
            ])
        )
        return
        
    if not (update.message.photo or update.message.document):
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ –ø–ª–∞—Ç–µ–∂–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
            ])
        )
        return
    
    receipt_id = update.message.photo[-1].file_id if update.message.photo else update.message.document.file_id
    update_transaction(
        transaction_id=transaction_id,
        status='pending',
        receipt_id=receipt_id
    )
    
    cursor.execute(
        '''SELECT amount, attempts FROM transactions WHERE id = ?''',
        (transaction_id,)
    )
    amount, attempts = cursor.fetchone()
    
    caption = (
        f"üì§ –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç @{user.username}\n"
        f"üÜî ID: {user.id}\n"
        f"üíé –ü–æ–ø—ã—Ç–æ–∫: {attempts}\n"
        f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±\n"
        f"üìù ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}"
    )

    try:
        if update.message.photo:
            msg = await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=update.message.photo[-1].file_id,
                caption=caption,
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{transaction_id}:{user.id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{transaction_id}:{user.id}")
                    ]
                ])
            )
        else:
            msg = await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=update.message.document.file_id,
                caption=caption,
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{transaction_id}:{user.id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{transaction_id}:{user.id}")
                    ]
                ])
            )
        
        await update.message.reply_text(
            "üì® –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "‚è≥ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_start")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error sending receipt: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_start")]
            ])
        )

async def confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏.", show_alert=True)
        return
        
    _, transaction_id, user_id = query.data.split(":")
    transaction_id = int(transaction_id)
    user_id = int(user_id)
    
    try:
        cursor.execute(
            '''SELECT amount, attempts FROM transactions WHERE id = ?''',
            (transaction_id,)
        )
        result = cursor.fetchone()
        
        if not result:
            await query.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
            
        amount, attempts = result
        
        update_transaction(
            transaction_id=transaction_id,
            status='completed',
            admin_id=query.from_user.id
        )
        
        update_user_attempts(user_id=user_id, paid=attempts)
        
        user_attempts = get_user_attempts(user_id)
        
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ <b>–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                 f"üíé –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>{attempts}</b> –ø–æ–ø—ã—Ç–æ–∫.\n"
                 f"üîÑ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{user_attempts['remaining']}</b> –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n"
                 f"üéØ –ú–æ–∂–µ—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã!",
            parse_mode=ParseMode.HTML,
            reply_markup=get_play_keyboard(user_id)
        )
        
        await query.message.delete()
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
                 f"üíé –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {attempts}\n"
                 f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±\n"
                 f"üîÑ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {user_attempts['remaining']}\n"
                 f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"Error confirming payment: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

async def decline_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂–∏.", show_alert=True)
        return
        
    _, transaction_id, user_id = query.data.split(":")
    transaction_id = int(transaction_id)
    user_id = int(user_id)
    
    try:
        update_transaction(
            transaction_id=transaction_id,
            status='declined',
            admin_id=query.from_user.id
        )
        
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå <b>–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                 "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                 "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–µ–∫\n"
                 "‚Ä¢ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Å—É–º–º–∞\n"
                 "‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
                 "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_start_keyboard()
        )
        
        await query.message.delete()
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {user_id}\n"
                 f"üìù ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}\n"
                 f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"Error declining payment: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    context.chat_data.pop("current_transaction", None)
    context.chat_data.pop("payment_choice", None)
    context.chat_data.pop("payment_amount", None)
    context.chat_data.pop("payment_attempts", None)
    
    await query.message.edit_text(
        "üé° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>!\n\n"
        "üíé –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!\n"
        "üí∞ –ü–æ–ø—ã—Ç–∫–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å, –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard(query.from_user.id)
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "play":
        await spin_wheel(update, context)
    elif query.data == "buy_attempts":
        await buy_attempts(update, context)
    elif query.data.startswith("pay_"):
        await handle_payment_choice(update, context)
    elif query.data == "spin_wheel":
        await spin_wheel(update, context)
    elif query.data == "check_attempts":
        await check_attempts(update, context)
    elif query.data == "daily_bonus":
        await daily_bonus(update, context)
    elif query.data == "referral_info":
        await referral_info(update, context)
    elif query.data.startswith("confirm:"):
        await confirm_payment(update, context)
    elif query.data.startswith("decline:"):
        await decline_payment(update, context)
    elif query.data == "back_to_start":
        await back_to_start(update, context)
    elif query.data == "admin_panel":
        await admin_panel(update, context)
    elif query.data == "manage_payment_methods":
        await manage_payment_methods(update, context)
    elif query.data == "admin_stats":
        await admin_stats(update, context)
    elif query.data == "add_payment_method":
        await add_payment_method_handler(update, context)
    elif query.data.startswith("edit_method_"):
        await edit_payment_method_handler(update, context)
    elif query.data.startswith("admin_method_"):
        await toggle_payment_method_handler(update, context)
    elif query.data.startswith("delete_method_"):
        await delete_payment_method_handler(update, context)
    elif query.data.startswith("method_"):
        await show_payment_method(update, context)
    elif query.data == "back_to_payment_methods":
        await back_to_payment_methods(update, context)
    elif query.data == "admin_back":
        await admin_panel(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    if update and update.effective_user:
        await context.bot.send_message(
            chat_id=update.effective_user.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_start_keyboard(update.effective_user.id)
        )

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_receipt))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment_method_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    finally:
        conn.close()
        logger.info("Database connection closed")