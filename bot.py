import logging
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, CallbackQueryHandler, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–≤–∏—Ç–∞–Ω—Ü–∏–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü—Ä–∏–∑–æ–≤—ã–µ —Å–µ–∫—Ç–æ—Ä–∞ –ö–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã
PRIZES = [
    "100 —Ä—É–±–ª–µ–π",
    "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞",
    "5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫",
    "10 —Ä—É–±–ª–µ–π",
    "–ö–æ–Ω—Ñ–µ—Ç–∫–∞",
    "–ù–∏—á–µ–≥–æ",
    "5 —Ä—É–±–ª–µ–π",
    "–°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥. –∏–≥—Ä—É",
    "–ü–æ–¥–∞—Ä–æ–∫"
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
def get_start_keyboard():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="play")
    ], [
        InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã", callback_data="payment_info")
    ]])

def get_back_keyboard():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")
    ]])

def get_admin_confirmation_keyboard(user_id):
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment:{user_id}"),
        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"decline_payment:{user_id}")
    ]])

# –ö–æ–º–∞–Ω–¥–∞ start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ.",
        reply_markup=get_start_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ play
async def play(update: Update, context: CallbackContext):
    await update.callback_query.message.reply_text(
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å, –ø–µ—Ä–µ–≤–µ–¥–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        "–°—É–º–º–∞: 100 —Ä—É–±–ª–µ–π\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ. –Ø –ø—Ä–æ–≤–µ—Ä—é –∏ –¥–∞–º —Ç–µ–±–µ –ø–æ–ø—ã—Ç–∫–∏!",
        reply_markup=get_back_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
async def payment_info(update: Update, context: CallbackContext):
    await update.callback_query.message.reply_text(
        "–ü–µ—Ä–µ–≤–µ–¥–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n"
        "–°—É–º–º–∞: 100 —Ä—É–±–ª–µ–π\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ, –∏ —è –¥–∞–º —Ç–µ–±–µ –ø–æ–ø—ã—Ç–∫–∏!",
        reply_markup=get_back_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–µ—Å–∞ —Ñ–æ—Ä—Ç—É–Ω—ã
async def spin_wheel(update: Update, context: CallbackContext):
    prize = random.choice(PRIZES)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
    await update.callback_query.message.reply_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –≤—ã–∏–≥—Ä–∞–ª: {prize} üéâ",
        reply_markup=get_back_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–≤–∏—Ç–∞–Ω—Ü–∏–π (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
async def handle_receipt(update: Update, context: CallbackContext):
    user = update.effective_user
    if update.message.photo:
        caption = f"–ß–µ–∫ –æ—Ç @{user.username} (ID: {user.id})"
        await context.bot.send_photo(
            chat_id=ADMIN_ID,
            photo=update.message.photo[-1].file_id,
            caption=caption,
            reply_markup=get_admin_confirmation_keyboard(user.id)  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        )
        await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=get_back_keyboard())
    elif update.message.document:
        caption = f"–ß–µ–∫ –æ—Ç @{user.username} (ID: {user.id})"
        await context.bot.send_document(
            chat_id=ADMIN_ID,
            document=update.message.document.file_id,
            caption=caption,
            reply_markup=get_admin_confirmation_keyboard(user.id)  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        )
        await update.message.reply_text("–ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.", reply_markup=get_back_keyboard())
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ –ø–ª–∞—Ç–µ–∂–µ.", reply_markup=get_back_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)
async def confirm_payment(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        # –ü–æ–ª—É—á–∞–µ–º user_id –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data
        client_id = int(update.callback_query.data.split(":")[1])
        await update.callback_query.message.reply_text("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –ø–æ–ø—ã—Ç–∫–∏.", reply_markup=get_back_keyboard())
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await spin_wheel(update, context)
    else:
        await update.callback_query.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É.", reply_markup=get_back_keyboard())

async def decline_payment(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id == ADMIN_ID:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        # –ü–æ–ª—É—á–∞–µ–º user_id –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ callback_data
        client_id = int(update.callback_query.data.split(":")[1])
        await update.callback_query.message.reply_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=get_back_keyboard())
    else:
        await update.callback_query.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É.", reply_markup=get_back_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏
    if query.data == "play":
        await play(update, context)
    elif query.data == "payment_info":
        await payment_info(update, context)
    elif query.data == "back":
        await start(update, context)
    elif query.data.startswith("confirm_payment"):
        await confirm_payment(update, context)
    elif query.data.startswith("decline_payment"):
        await decline_payment(update, context)

# –û—à–∏–±–∫–∏
async def error(update: Update, context: CallbackContext):
    logger.warning(f'Update {update} caused error {context.error}')

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_receipt))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    application.add_handler(MessageHandler(filters.Document.ALL, handle_receipt))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    application.add_handler(CallbackQueryHandler(button))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_error_handler(error)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
