import logging
import os
import random
import asyncio
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('wheel_of_fortune.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''CREATE TABLE IF NOT EXISTS user_attempts
                  (user_id INTEGER PRIMARY KEY, paid INTEGER, used INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS payment_methods
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   name TEXT NOT NULL UNIQUE,
                   details TEXT NOT NULL,
                   is_active BOOLEAN DEFAULT 1)''')
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üé∞ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="play")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ú–æ–∏ –ø–æ–ø—ã—Ç–∫–∏", callback_data="check_attempts")]
    ])

def get_play_keyboard(user_id):
    cursor.execute('SELECT paid, used FROM user_attempts WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result and result[0] > result[1]:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ", callback_data="spin_wheel")],
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–æ–∫", callback_data="play")]
        ])
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="play")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ú–æ–∏ –ø–æ–ø—ã—Ç–∫–∏", callback_data="check_attempts")]
    ])

def get_payment_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("1 –ø–æ–ø—ã—Ç–∫–∞ ‚Äî 50 —Ä—É–±", callback_data="pay_1")],
        [InlineKeyboardButton("3 –ø–æ–ø—ã—Ç–∫–∏ ‚Äî 130 —Ä—É–± (‚ÜòÔ∏è10%)", callback_data="pay_3")],
        [InlineKeyboardButton("5 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 200 —Ä—É–± (‚ÜòÔ∏è20%)", callback_data="pay_5")],
        [InlineKeyboardButton("10 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 350 —Ä—É–± (‚ÜòÔ∏è30%)", callback_data="pay_10")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

def get_payment_methods_keyboard():
    cursor.execute('SELECT id, name FROM payment_methods WHERE is_active = 1')
    methods = cursor.fetchall()
    keyboard = []
    for method in methods:
        keyboard.append([InlineKeyboardButton(method[1], callback_data=f"method_{method[0]}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])
    return InlineKeyboardMarkup(keyboard)

def get_admin_payment_methods_keyboard():
    cursor.execute('SELECT id, name, is_active FROM payment_methods')
    methods = cursor.fetchall()
    keyboard = []
    for method in methods:
        status = "‚úÖ" if method[2] else "‚ùå"
        keyboard.append([
            InlineKeyboardButton(f"{status} {method[1]}", callback_data=f"admin_method_{method[0]}"),
            InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_method_{method[0]}"),
            InlineKeyboardButton("üóë", callback_data=f"delete_method_{method[0]}")
        ])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–±", callback_data="add_payment_method")])
    keyboard.append([InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="admin_back")])
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def save_user_attempts(user_id, paid_attempts, used_attempts):
    try:
        cursor.execute(
            'INSERT OR REPLACE INTO user_attempts (user_id, paid, used) VALUES (?, ?, ?)',
            (user_id, paid_attempts, used_attempts)
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")

def add_payment_method(name, details):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
        cursor.execute('SELECT id FROM payment_methods WHERE name = ?', (name,))
        if cursor.fetchone():
            logger.warning(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
            
        cursor.execute(
            'INSERT INTO payment_methods (name, details) VALUES (?, ?)',
            (name, details)
        )
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {name}")
        return True
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        conn.rollback()
        return False

def update_payment_method(method_id, name, details):
    try:
        cursor.execute(
            'UPDATE payment_methods SET name = ?, details = ? WHERE id = ?',
            (name, details, method_id)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        conn.rollback()
        return False

def toggle_payment_method(method_id):
    try:
        cursor.execute(
            'UPDATE payment_methods SET is_active = NOT is_active WHERE id = ?',
            (method_id,)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        conn.rollback()
        return False

def delete_payment_method(method_id):
    try:
        cursor.execute(
            'DELETE FROM payment_methods WHERE id = ?',
            (method_id,)
        )
        conn.commit()
        return True
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        conn.rollback()
        return False

def get_payment_method(method_id):
    try:
        cursor.execute(
            'SELECT name, details FROM payment_methods WHERE id = ?',
            (method_id,)
        )
        return cursor.fetchone()
    except sqlite3.Error as e:
        logger.error(f"Database error: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: CallbackContext):
    if update.message.from_user.id == ADMIN_ID:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", callback_data="admin_panel")],
            [InlineKeyboardButton("üé∞ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="play")]
        ])
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            "üé° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>!\n\n"
            "üíé –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!\n"
            "üí∞ –ü–æ–ø—ã—Ç–∫–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä–µ.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_start_keyboard()
        )

async def admin_panel(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã", callback_data="manage_payment_methods")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_start")]
    ])
    
    await query.message.edit_text(
        "üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode=ParseMode.HTML,
        reply_markup=keyboard
    )

async def manage_payment_methods(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    await query.message.edit_text(
        "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_admin_payment_methods_keyboard()
    )

async def add_payment_method_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    context.user_data['adding_payment_method'] = True
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
        ])
    )

async def edit_payment_method_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    method_id = int(query.data.split('_')[-1])
    context.user_data['editing_payment_method'] = method_id
    method = get_payment_method(method_id)
    
    if method:
        await query.message.edit_text(
            f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {method[0]}\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {method[1]}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "<code>–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</code>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
            ])
        )
    else:
        await query.answer("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

async def handle_payment_method_text(update: Update, context: CallbackContext):
    if 'adding_payment_method' in context.user_data:
        # –≠—Ç–∞–ø 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        name = update.message.text.strip()
        if not name:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        if len(name) > 50:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
            
        context.user_data['new_payment_name'] = name
        context.user_data['adding_payment_method'] = False
        context.user_data['adding_payment_details'] = True
        
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="manage_payment_methods")]
            ])
        )
    
    elif 'adding_payment_details' in context.user_data:
        # –≠—Ç–∞–ø 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
        details = update.message.text.strip()
        if not details:
            await update.message.reply_text("–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
            
        name = context.user_data.get('new_payment_name')
        if not name:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã")
            return
            
        if add_payment_method(name, details):
            await update.message.reply_text(
                f"‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã <b>{name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                parse_mode=ParseMode.HTML
            )
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('new_payment_name', None)
            context.user_data.pop('adding_payment_details', None)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ —Å–ø–∏—Å–∫—É —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
            await manage_payment_methods(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
            )
    
    elif 'editing_payment_method' in context.user_data:
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–æ—Å–æ–±–∞
        method_id = context.user_data['editing_payment_method']
        try:
            text = update.message.text.strip()
            if not text:
                await update.message.reply_text("–î–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
                return
                
            parts = text.split('\n', 1)
            if len(parts) != 2:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö.")
                return
                
            name, details = parts
            name = name.strip()
            details = details.strip()
            
            if not name or not details:
                await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.")
                return
                
            if update_payment_method(method_id, name, details):
                await update.message.reply_text(
                    "‚úÖ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."
            )
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('editing_payment_method', None)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
            await manage_payment_methods(update, context)

async def toggle_payment_method_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    method_id = int(query.data.split('_')[-1])
    if toggle_payment_method(method_id):
        await query.message.edit_reply_markup(reply_markup=get_admin_payment_methods_keyboard())
    else:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)

async def delete_payment_method_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.", show_alert=True)
        return
    
    method_id = int(query.data.split('_')[-1])
    if delete_payment_method(method_id):
        await query.message.edit_reply_markup(reply_markup=get_admin_payment_methods_keyboard())
    else:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã", show_alert=True)

async def play(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:\n\n"
        "üíé 1 –ø–æ–ø—ã—Ç–∫–∞ ‚Äî 50 —Ä—É–±\n"
        "üíé 3 –ø–æ–ø—ã—Ç–∫–∏ ‚Äî 130 —Ä—É–± (—ç–∫–æ–Ω–æ–º–∏—è 10%)\n"
        "üíé 5 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 200 —Ä—É–± (—ç–∫–æ–Ω–æ–º–∏—è 20%)\n"
        "üíé 10 –ø–æ–ø—ã—Ç–æ–∫ ‚Äî 350 —Ä—É–± (—ç–∫–æ–Ω–æ–º–∏—è 30%)",
        reply_markup=get_payment_keyboard()
    )

async def check_attempts(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    cursor.execute('SELECT paid, used FROM user_attempts WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if result:
        text = (
            f"üìä –í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏:\n\n"
            f"üíé –í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: {result[0]}\n"
            f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {result[1]}\n"
            f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: {result[0] - result[1]}"
        )
    else:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫. –•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å?"
    
    await query.message.edit_text(
        text,
        reply_markup=get_play_keyboard(user_id)
    )

async def handle_payment_choice(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    choice = query.data.split("_")[1]
    amounts = {"1": 50, "3": 130, "5": 200, "10": 350}
    
    if choice in amounts:
        context.chat_data["payment_choice"] = choice
        await query.message.edit_text(
            f"üí≥ –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{choice}</b> –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ <b>{amounts[choice]} —Ä—É–±</b>.\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            parse_mode=ParseMode.HTML,
            reply_markup=get_payment_methods_keyboard()
        )
    else:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

async def show_payment_method(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    method_id = int(query.data.split("_")[1])
    method = get_payment_method(method_id)
    
    if not method:
        await query.answer("–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    name, details = method
    choice = context.chat_data.get("payment_choice")
    amounts = {"1": 50, "3": 130, "5": 200, "10": 350}
    amount = amounts.get(choice, 0)
    
    await query.message.edit_text(
        f"üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {name}</b>\n\n"
        f"üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {choice}\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} —Ä—É–±\n\n"
        f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b>\n"
        f"{details}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±", callback_data="back_to_payment_methods")]
        ])
    )

async def back_to_payment_methods(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=get_payment_methods_keyboard()
    )

async def spin_wheel(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    cursor.execute('SELECT paid, used FROM user_attempts WHERE user_id = ?', (user_id,))
    result = cursor.fetchone()
    
    if not result or result[0] <= result[1]:
        await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!", show_alert=True)
        return
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    new_used = result[1] + 1
    save_user_attempts(user_id, result[0], new_used)
    
    # –°–∏–º–≤–æ–ª—ã –¥–ª—è –∫–æ–ª–µ—Å–∞ –∏ –∏—Ö –≤–µ—Å–∞
    wheel_segments = ["üçí", "üçã", "üçä", "üçá", "üçâ", "üí∞", "üéÅ", "‚≠ê", "üçÄ"]
    segment_weights = [15, 15, 15, 15, 10, 5, 5, 10, 10]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    selected_index = random.choices(range(len(wheel_segments)), weights=segment_weights, k=1)[0]
    selected_segment = wheel_segments[selected_index]
    
    # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∫ –ø—Ä–∏–∑–∞–º
    prize_mapping = {
        "üçí": "10 —Ä—É–±–ª–µ–π",
        "üçã": "20 —Ä—É–±–ª–µ–π",
        "üçä": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞",
        "üçá": "5 —Ä—É–±–ª–µ–π",
        "üçâ": "–ö–æ–Ω—Ñ–µ—Ç–∫–∞",
        "üí∞": "100 —Ä—É–±–ª–µ–π",
        "üéÅ": "–ü–æ–¥–∞—Ä–æ–∫",
        "‚≠ê": "5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫",
        "üçÄ": "–°–∫–∏–¥–∫–∞ 10% –Ω–∞ —Å–ª–µ–¥. –∏–≥—Ä—É"
    }
    prize = prize_mapping.get(selected_segment, "–ù–∏—á–µ–≥–æ")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    message = await query.message.reply_text(
        "üé° <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>\n\n"
        f"{' ' * 8}üëÜ\n"
        f"{' '.join(wheel_segments)}\n\n"
        "üåÄ –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...",
        parse_mode=ParseMode.HTML
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∏–º–∞—Ü–∏–∏
    spin_duration = 3
    frames = 15
    slowdown_start = 10
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    for frame in range(frames):
        # –í—Ä–∞—â–∞–µ–º –∫–æ–ª–µ—Å–æ
        wheel_segments.insert(0, wheel_segments.pop())
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        if frame < slowdown_start:
            delay = 0.15
        else:
            delay = 0.15 + (frame - slowdown_start) * 0.1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            "üé° <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>\n\n"
            f"{' ' * 8}üëÜ\n"
            f"{' '.join(wheel_segments)}\n\n"
            f"{'üåÄ' * (frame % 3 + 1)} –ö—Ä—É—Ç–∏–º –∫–æ–ª–µ—Å–æ...",
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(delay)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–µ—Å–æ
    while wheel_segments[-1] != selected_segment:
        wheel_segments.insert(0, wheel_segments.pop())
        await message.edit_text(
            "üé° <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>\n\n"
            f"{' ' * 8}üëÜ\n"
            f"{' '.join(wheel_segments)}\n\n"
            "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...",
            parse_mode=ParseMode.HTML
        )
        await asyncio.sleep(0.3)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∑–æ–≤
    bonus_text = ""
    if prize == "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞":
        cursor.execute('UPDATE user_attempts SET paid = paid + 1 WHERE user_id = ?', (user_id,))
        conn.commit()
        bonus_text = "\n\nüéÅ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞!"
    elif prize == "5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫":
        cursor.execute('UPDATE user_attempts SET paid = paid + 5 WHERE user_id = ?', (user_id,))
        conn.commit()
        bonus_text = "\n\nüéÅ –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ 5 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫!"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    cursor.execute('SELECT paid, used FROM user_attempts WHERE user_id = ?', (user_id,))
    updated_attempts = cursor.fetchone()
    remaining = updated_attempts[0] - updated_attempts[1]
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.edit_text(
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
        f"üèÜ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: <b>{prize}</b>{bonus_text}\n\n"
        f"üîÑ –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: <b>{remaining}</b>\n\n"
        "–•–æ—Ç–∏—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –µ—â–µ?",
        parse_mode=ParseMode.HTML,
        reply_markup=get_play_keyboard(user_id)
    )
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    try:
        await query.message.delete()
    except:
        pass

async def handle_receipt(update: Update, context: CallbackContext):
    user = update.effective_user
    payment_choice = context.chat_data.get("payment_choice")
    
    if not payment_choice:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
        return
        
    if not (update.message.photo or update.message.document):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –æ –ø–ª–∞—Ç–µ–∂–µ (—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).")
        return
    
    amount = {"1": 50, "3": 130, "5": 200, "10": 350}.get(payment_choice, 0)
    caption = (
        f"üì§ –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç @{user.username}\n"
        f"üÜî ID: {user.id}\n"
        f"üíé –ü–æ–ø—ã—Ç–æ–∫: {payment_choice}\n"
        f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±"
    )

    try:
        if update.message.photo:
            msg = await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=update.message.photo[-1].file_id,
                caption=caption,
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{user.id}:{user.username}:{payment_choice}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{user.id}:{user.username}")
                    ]
                ])
            )
        else:
            msg = await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=update.message.document.file_id,
                caption=caption,
                reply_markup=InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{user.id}:{user.username}:{payment_choice}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline:{user.id}:{user.username}")
                    ]
                ])
            )
        
        await update.message.reply_text(
            "üì® –í–∞—à —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "‚è≥ –û–±—ã—á–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_to_start")]
            ])
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        context.chat_data["admin_message_id"] = msg.message_id
        
    except Exception as e:
        logger.error(f"Error sending receipt: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def confirm_payment(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏.", show_alert=True)
        return
        
    _, user_id, username, payment_choice = query.data.split(":")
    user_id = int(user_id)
    new_attempts = {"1": 1, "3": 3, "5": 5, "10": 10}.get(payment_choice, 0)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        cursor.execute('SELECT paid, used FROM user_attempts WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if result:
            current_paid, current_used = result
            # –°—É–º–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
            total_paid = current_paid + new_attempts
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
            save_user_attempts(user_id, total_paid, current_used)
            remaining_attempts = total_paid - current_used
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            save_user_attempts(user_id, new_attempts, 0)
            remaining_attempts = new_attempts
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úÖ <b>–í–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                 f"üíé –í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>{new_attempts}</b> –ø–æ–ø—ã—Ç–æ–∫.\n"
                 f"üîÑ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å <b>{remaining_attempts}</b> –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫.\n"
                 f"üéØ –ú–æ–∂–µ—Ç–µ –∫—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã!",
            parse_mode=ParseMode.HTML,
            reply_markup=get_play_keyboard(user_id)
        )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º
        await query.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                 f"üíé –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {new_attempts}\n"
                 f"üîÑ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {remaining_attempts}\n"
                 f"üïí –í—Ä–µ–º—è: {query.message.date.strftime('%Y-%m-%d %H:%M')}",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"Error confirming payment: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

async def decline_payment(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != ADMIN_ID:
        await query.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–ª–∞—Ç–µ–∂–∏.", show_alert=True)
        return
        
    _, user_id, username = query.data.split(":")
    user_id = int(user_id)
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå <b>–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
                 "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                 "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–µ–∫\n"
                 "‚Ä¢ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Å—É–º–º–∞\n"
                 "‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n"
                 "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_start_keyboard()
        )
        
        # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º
        await query.message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                 f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
                 f"üïí –í—Ä–µ–º—è: {query.message.date.strftime('%Y-%m-%d %H:%M')}",
            reply_markup=None
        )
        
    except Exception as e:
        logger.error(f"Error declining payment: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

async def back_to_start(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üé° –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã</b>!\n\n"
        "üíé –ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!\n"
        "üí∞ –ü–æ–ø—ã—Ç–∫–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –∏–ª–∏ –≤—ã–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä–µ.",
        parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard()
    )

async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == "play":
        await play(update, context)
    elif query.data.startswith("pay_"):
        await handle_payment_choice(update, context)
    elif query.data == "spin_wheel":
        await spin_wheel(update, context)
    elif query.data == "check_attempts":
        await check_attempts(update, context)
    elif query.data.startswith("confirm:"):
        await confirm_payment(update, context)
    elif query.data.startswith("decline:"):
        await decline_payment(update, context)
    elif query.data == "back_to_start":
        await back_to_start(update, context)
    elif query.data == "admin_panel":
        await admin_panel(update, context)
    elif query.data == "manage_payment_methods":
        await manage_payment_methods(update, context)
    elif query.data == "add_payment_method":
        await add_payment_method_handler(update, context)
    elif query.data.startswith("edit_method_"):
        await edit_payment_method_handler(update, context)
    elif query.data.startswith("admin_method_"):
        await toggle_payment_method_handler(update, context)
    elif query.data.startswith("delete_method_"):
        await delete_payment_method_handler(update, context)
    elif query.data.startswith("method_"):
        await show_payment_method(update, context)
    elif query.data == "back_to_payment_methods":
        await back_to_payment_methods(update, context)
    elif query.data == "admin_back":
        await admin_panel(update, context)

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL, handle_receipt))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_payment_method_text))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    finally:
        conn.close()
        logger.info("Database connection closed")